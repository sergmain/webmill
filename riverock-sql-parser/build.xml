<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * org.riverock.sql - Classes for tracking database changes
 * 
 * Copyright (C) 2004, Riverock Software, All Rights Reserved.
 * 
 * Riverock - The Open-source Java Development Community
 * http://www.riverock.org
 * 
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */
-->
<!--$Id$-->
<project name="riverock.sql" default="jar" basedir=".">
    <!-- Global initialization                                               -->
    <target name="set_release_version">
        <property name="release-version" value="1.1.6"/>
        <property name="java.target" value="1.4"/>
        <property name="java.class.target" value="1.4"/>
    </target>

    <target name="clean" depends="init">
        <delete failonerror="false">
            <fileset dir="${build.dir}">
                <include name="**"/>
                <include name="*.jar"/>
                <include name="*.tar"/>
                <include name="*.gz"/>
            </fileset>
        </delete>
        <delete dir="${docs.dir}" failonerror="false"/>
        <delete dir="${build.dir}/src/" failonerror="false"/>
        <delete dir="${build.dir}/classes/" failonerror="false"/>
        <delete dir="${build.dir}/bin/" failonerror="false"/>
        <delete dir="${build.dir}/tomcat/" failonerror="false"/>
        <delete dir="${build.dir}/ext/" failonerror="false"/>
        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="make_manifest_file" depends="init">
        <echo message="Start make manifest file"/>
    <echo file="${build.dest}/${manifest-file-name}">Manifest-Version: 1.0
Specification-Title: ${manifest-title-name}
Specification-Vendor: ${manifest-vendor-name}
Specification-Version: ${release-version}
Implementation-Title: ${manifest-title-name}
Implementation-Vendor: ${manifest-vendor-name}
Implementation-Version: ${release-version}

Name: ${manifest-title-name}
Sealed: true
</echo>
        <echo message="Manifest file is created"/>
    </target>

    <target name="compile" depends="prepare, set_build_number">
        <mkdir dir="${build.dest}"/>
        <javac
            target="${java.class.target}"
            srcdir="${build.src.java}"
            destdir="${build.dest}"
            excludes="org/riverock/sql/parser/test/**,*.txt,*.bat,*.xml,*.sh,*.jav"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"
            failonerror="true"
            >
            <classpath refid="classpath-base"/>
        </javac>
    </target>

    <target name="gen_all_schema" depends="init,prepare">
        <antcall target="gen_test_schema"/>
        <antcall target="gen_sql_schema"/>
    </target>
    <target name="gen_test_schema" depends="init,prepare">
        <property name="schema-dir" value="${src.java.dir}/org/riverock/schema/test/"/>
        <property name="schema-file" value="${src.xsd.dir}/riverock-test-schema.xsd"/>
        <property name="schema-package-java" value="org.riverock.schema.test"/>
        <antcall target="gen_schema"/>
    </target>
    <target name="gen_sql_schema" depends="init,prepare">
        <property name="schema-dir" value="${src.java.dir}/org/riverock/schema/sql/"/>
        <property name="schema-file" value="${src.xsd.dir}/riverock-sql-parser.xsd"/>
        <property name="schema-package-java" value="org.riverock.schema.sql"/>
        <property name="schema-collection-type" value="j2"/>
        <antcall target="gen_schema"/>
    </target>

    <target name="gen_schema" depends="init">
        <antcall target="clean"/>
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${schema-dir}">
                <include name="**/*.java"/>
                <exclude name="**/CVS"/>
            </fileset>
        </delete>
        <echo message="XSD - ${schema-file}"/>
        <java fork="true" classname="org.exolab.castor.builder.SourceGenerator">
            <arg value="-i"/>
            <arg value="${schema-file}"/>
            <arg value="-package"/>
            <arg value="${schema-package-java}"/>
            <arg value="-dest"/>
            <arg value="${src.java.dir}"/>
            <!--
            <arg value="-types"/>
            <arg value="${schema-collection-type}"/>
            -->
            <arg value="-f"/>
            <arg value="-binding-file"/>
            <arg value="${src.xml.dir}/binding.xml"/>
            <arg value="-nomarshall"/>
            <classpath>
                <pathelement location="${local-lib.dir}/castor" />
                <path refid="classpath-base"/>
            </classpath>
        </java>
    </target>

    <target name="full_clean">
        <antcall target="clean"/>
    </target>

    <target name="full_build_module">
        <antcall target="full_clean"/>
<!--        <ant antfile="build-core.xml" target="gen_core"  inheritall="false" />-->
<!--        <ant antfile="build-schema.xml" target="gen_all_schema" inheritall="false" />-->
        <antcall target="jar"/>
    </target>

    <target name="jar" depends="init, clean, compile, make_manifest_file">
        <jar
            jarfile="${build.dir}/${main.lib}"
            basedir="${build.dest}"
            includes="org/**"
            excludes="
            org/riverock/sql/parser/test/**,
            org/riverock/schema/test/**,
            **/*.txt,**/*.bat,**/*.xml,**/*.sh,**/*.jav,${manifest-file-name}"
            manifest="${build.dest}/${manifest-file-name}"/>
        <copy file="${build.dir}/${main.lib}" todir="../riverock-lib/lib"/>
    </target>

    <!-- =================================================================== -->
    <!-- Runs unit tests                                                     -->
    <!-- =================================================================== -->
    <target name="ut" depends="compile,init">
      <echo message="Running unit tests "/>

      <javac srcdir="${src.java-test.dir}"
             destdir="${build.tests}"
             debug="${debug}"
             deprecation="${deprecation}"
             optimize="${optimize}"
         classpath="${lib.dir}">
          <classpath>
              <path location="${build.dir}/classes"/>
              <path refid="classpath-base"/>
          </classpath>
       </javac>

       <junit printsummary="yes" haltonfailure="no" haltonerror="no" showoutput="no"
           dir="${run.dir}" fork="true" >

          <classpath>
              <path location="${build.tests}"/>
              <path location="${build.dir}/classes"/>
              <path refid="classpath-base"/>
          </classpath>

          <formatter type="plain" usefile="false"/>

          <batchtest fork="yes" haltonfailure="yes" haltonerror="yes">
            <fileset dir="${build.tests}">
                <include name="**/Test*.class"/>
                <exclude name="**/*$*.class"/>
            </fileset>
          </batchtest>
       </junit>

    </target>

    <target name="war" depends="jar">
        <delete dir="${build.dir}/${war.dir}" failonerror="false"/>
        <copy todir="${build.dir}/${war.dir}">
            <fileset dir="${src.war.dir}"/>
        </copy>
        <copy file="${build.dir}/${main.lib}" tofile="${build.dir}/${war.dir}/WEB-INF/lib/${main.lib}"/>
        <copy file="${lib.dir}/${log4j.lib}" tofile="${build.dir}/${war.dir}/WEB-INF/lib/${log4j.lib}"/>
        <war destfile="${build.dir}/${Name}.war"
            webxml="${build.dir}/${war.dir}/WEB-INF/web.xml"
            basedir="${build.dir}/${war.dir}">
        </war>
    </target>

    <!-- Initialization target                                               -->
    <target name="init" depends="set_release_version">
        <property name="manifest-title-name" value="riverock sql library"/>
        <property name="manifest-vendor-name" value="riverock. http://sql.riverock.com"/>

        <property name="Name" value="riverock-sql-parser"/>
        <property name="main.lib" value="${Name}-${release-version}.jar"/>
        <property name="main.lib.encoded" value="${Name}-${release-version}.encoded.jar"/>

        <property name="lib.dir" value="../riverock-lib/lib"/>
        <property name="local-lib.dir" value="lib"/>

        <property file="../riverock.properties"/>

        <!-- runtime library -->
        <property name="site.name" value="_localhost"/>

        <property name="doc.dir" value="doc"/>
        <property name="war.dir" value="war"/>
        <property name="src.dir" value="src"/>
        <property name="run.dir" value="run"/>
        <property name="tomcat.dir" value="tomcat"/>

        <property name="src.tomcat-xml.dir" value="${src.dir}/tomcat-xml"/>
        <property name="src.java.dir" value="${src.dir}/java"/>
        <property name="src.java-test.dir" value="${src.dir}/test"/>
        <property name="src.jsp.dir" value="${src.dir}/jsp"/>
        <property name="src.xsd.dir" value="${src.dir}/xsd"/>
        <property name="src.xml.dir" value="${src.dir}/xml"/>
        <property name="src.war.dir" value="${src.dir}/${war.dir}"/>

        <property name="src.site.dir" value="${src.jsp.dir}/${site.name}"/>

        <property name="manifest-file-name" value="manifest.mf"/>
        <property name="manifest" value="src/java/${manifest-file-name}"/>

        <path id="classpath-1.4">
            <pathelement location="${lib.dir}/1.4/ojdbc14.jar"/>
        </path>
        <path id="classpath-1.3">
            <pathelement location="${lib.dir}/1.3/classes12.zip"/>
            <pathelement location="${lib.dir}/xml-commons-1.1.1.jar"/>
            <pathelement location="${lib.dir}/jce1_2_1.jar"/>
        </path>
        <path id="classpath-base">
<!--            <pathelement location="${lib.dir}/mill-core-v1.encoded.jar"/>-->
            <pathelement location="${lib.dir}/${servlet.lib}"/>
            <pathelement location="${lib.dir}/mail.jar"/>
            <pathelement location="${lib.dir}/${log4j.lib}"/>
            <pathelement location="${lib.dir}/${common-logging.lib}"/>
            <pathelement location="${lib.dir}/${junit.lib}"/>
            <pathelement location="${lib.dir}/${castor.lib}"/>
            <pathelement location="${lib.dir}/${xerces.lib}"/>
            <pathelement location="${lib.dir}/${xml-api.lib}"/>

            <path refid="classpath-${java.target}"/>
        </path>

        <property name="packages" value="mill.*"/>
        <property name="build.dir" value="build"/>
        <property name="build.tests" value="${build.dir}/tests"/>
        <property name="build.src.java" value="${src.java.dir}"/>
        <property name="build.src.jsp" value="${src.jsp.dir}"/>
        <property name="build.dest" value="${build.dir}/classes"/>
        <property name="dist.dir" value="${build.dir}/dist"/>
        <property name="docs.dir" value="${build.dir}/javadocs"/>

        <property name="debug" value="on"/>
        <property name="optimize" value="off"/>
        <property name="deprecation" value="on"/>

    </target>
    <!-- Note this file can only make Ant display values set in the file correctly, -->
    <!-- but external values in the environment or properties file will be operational.  -->
    <!-- Help on usage                                                       -->
    <target name="usage" depends="init">
        <echo message=""/>
        <echo message=""/>
        <echo message="${Name} Build file"/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" available targets are:"/>
        <echo message=""/>
        <echo message="   compile      --> compiles the source code to the tree under ${build.dir}"/>
        <echo message="   package      --> generates the ${Name}.jar file"/>
        <echo message="   prepare-docs --> writes the documentation to ${docs.dir}"/>
        <echo message="   clean        --> cleans up the ${build.dir} directory"/>
        <echo message="   usage        --> show this message (default)"/>
        <echo message=""/>
        <echo message=" See the comments inside the build.xml file for more details."/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=""/>
    </target>
    <!-- Prepares the build directory                                        -->
    <target name="prepare" depends="init">
        <!--
        <echo message="Preparing the build directories"/>
        -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dest}"/>
        <mkdir dir="${build.tests}"/>
    </target>
    <!-- <target name="compile" depends="prepare"> -->
    <target name="docs" depends="prepare">
        <echo message="Build javadoc"/>
        <!-- create directories -->
        <mkdir dir="${docs.dir}"/>
        <javadoc
            sourcepath="${build.src.java}"
            destdir="${docs.dir}"
            verbose="true"
            defaultexcludes="true"
            packagenames="mill/db/*,mill/tools/*,mill/startup/*"
            excludepackagenames="mill/price/*"
            >
            <classpath refid="classpath-base"/>
        </javadoc>
    </target>

    <target name="set_build_number">
        <buildnumber/>
    </target>

</project>
