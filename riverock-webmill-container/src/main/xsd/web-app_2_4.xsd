<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:j2ee="http://java.sun.com/xml/ns/j2ee" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://java.sun.com/xml/ns/j2ee" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.4">
	<annotation>
		<documentation>
      @(#)web-app_2_4.xsds	1.61 04/04/16
    </documentation>
	</annotation>
	<annotation>
		<documentation>

      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

      Copyright 2003-2007 Sun Microsystems, Inc. All rights reserved.

      The contents of this file are subject to the terms of either the
      GNU General Public License Version 2 only ("GPL") or the Common
      Development and Distribution License("CDDL") (collectively, the
      "License").  You may not use this file except in compliance with
      the License. You can obtain a copy of the License at
      https://glassfish.dev.java.net/public/CDDL+GPL.html or
      glassfish/bootstrap/legal/LICENSE.txt.  See the License for the
      specific language governing permissions and limitations under the
      License.

      When distributing the software, include this License Header
      Notice in each file and include the License file at
      glassfish/bootstrap/legal/LICENSE.txt.  Sun designates this
      particular file as subject to the "Classpath" exception as
      provided by Sun in the GPL Version 2 section of the License file
      that accompanied this code.  If applicable, add the following
      below the License Header, with the fields enclosed by brackets []
      replaced by your own identifying information:
      "Portions Copyrighted [year] [name of copyright owner]"

      Contributor(s):

      If you wish your version of this file to be governed by only the
      CDDL or only the GPL Version 2, indicate your decision by adding
      "[Contributor] elects to include this software in this
      distribution under the [CDDL or GPL Version 2] license."  If you
      don't indicate a single choice of license, a recipient has the
      option to distribute your version of this file under either the
      CDDL, the GPL Version 2 or to extend the choice of license to its
      licensees as provided above.  However, if you add GPL Version 2
      code and therefore, elected the GPL Version 2 license, then the
      option applies only if the new code is made subject to such
      option by the copyright holder.

    </documentation>
	</annotation>
	<annotation>
		<documentation><![CDATA[

	This is the XML Schema for the Servlet 2.4 deployment descriptor.
	The deployment descriptor must be named "WEB-INF/web.xml" in the
	web application's war file.  All Servlet deployment descriptors
	must indicate the web application schema by using the J2EE
	namespace:

	http://java.sun.com/xml/ns/j2ee

	and by indicating the version of the schema by
	using the version element as shown below:

	    <web-app xmlns="http://java.sun.com/xml/ns/j2ee"
	      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	      xsi:schemaLocation="..."
	      version="2.4">
	      ...
	    </web-app>

	The instance documents may indicate the published version of
	the schema using the xsi:schemaLocation attribute for J2EE
	namespace with the following location:

	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd

	]]></documentation>
	</annotation>
	<annotation>
		<documentation>

      The following conventions apply to all J2EE
      deployment descriptor elements unless indicated otherwise.

      - In elements that specify a pathname to a file within the
	same JAR file, relative filenames (i.e., those not
	starting with "/") are considered relative to the root of
	the JAR file's namespace.  Absolute filenames (i.e., those
	starting with "/") also specify names in the root of the
	JAR file's namespace.  In general, relative names are
	preferred.  The exception is .war files where absolute
	names are preferred for consistency with the Servlet API.

    </documentation>
	</annotation>
	<include schemaLocation="j2ee_1_4.xsd"/>
	<include schemaLocation="jsp_2_0.xsd"/>
	<!-- **************************************************** -->
	<element name="web-app" type="j2ee:web-appType">
		<annotation>
			<documentation>

	The web-app element is the root of the deployment
	descriptor for a web application.  Note that the sub-elements
	of this element can be in the arbitrary order. Because of
	that, the multiplicity of the elements of distributable,
	session-config, welcome-file-list, jsp-config, login-config,
	and locale-encoding-mapping-list was changed from "?" to "*"
	in this schema.  However, the deployment descriptor instance
	file must not contain multiple elements of session-config,
	jsp-config, and login-config. When there are multiple elements of
	welcome-file-list or locale-encoding-mapping-list, the container
	must concatinate the element contents.  The multiple occurance
	of the element distributable is redundant and the container
	treats that case exactly in the same way when there is only
	one distributable.

      </documentation>
		</annotation>
		<unique name="web-app-servlet-name-uniqueness">
			<annotation>
				<documentation>

	  The servlet element contains the name of a servlet.
	  The name must be unique within the web application.

	</documentation>
			</annotation>
			<selector xpath="j2ee:servlet"/>
			<field xpath="j2ee:servlet-name"/>
		</unique>
		<unique name="web-app-filter-name-uniqueness">
			<annotation>
				<documentation>

	  The filter element contains the name of a filter.
	  The name must be unique within the web application.

	</documentation>
			</annotation>
			<selector xpath="j2ee:filter"/>
			<field xpath="j2ee:filter-name"/>
		</unique>
		<unique name="web-app-ejb-local-ref-name-uniqueness">
			<annotation>
				<documentation>

	  The ejb-local-ref-name element contains the name of an EJB
	  reference. The EJB reference is an entry in the web
	  application's environment and is relative to the
	  java:comp/env context.  The name must be unique within
	  the web application.

	  It is recommended that name is prefixed with "ejb/".

	</documentation>
			</annotation>
			<selector xpath="j2ee:ejb-local-ref"/>
			<field xpath="j2ee:ejb-ref-name"/>
		</unique>
		<unique name="web-app-ejb-ref-name-uniqueness">
			<annotation>
				<documentation>

	  The ejb-ref-name element contains the name of an EJB
	  reference. The EJB reference is an entry in the web
	  application's environment and is relative to the
	  java:comp/env context.  The name must be unique within
	  the web application.

	  It is recommended that name is prefixed with "ejb/".

	</documentation>
			</annotation>
			<selector xpath="j2ee:ejb-ref"/>
			<field xpath="j2ee:ejb-ref-name"/>
		</unique>
		<unique name="web-app-resource-env-ref-uniqueness">
			<annotation>
				<documentation>

	  The resource-env-ref-name element specifies the name of
	  a resource environment reference; its value is the
	  environment entry name used in the web application code.
	  The name is a JNDI name relative to the java:comp/env
	  context and must be unique within a web application.

	</documentation>
			</annotation>
			<selector xpath="j2ee:resource-env-ref"/>
			<field xpath="j2ee:resource-env-ref-name"/>
		</unique>
		<unique name="web-app-message-destination-ref-uniqueness">
			<annotation>
				<documentation>

	  The message-destination-ref-name element specifies the name of
	  a message destination reference; its value is the
	  environment entry name used in the web application code.
	  The name is a JNDI name relative to the java:comp/env
	  context and must be unique within a web application.

	</documentation>
			</annotation>
			<selector xpath="j2ee:message-destination-ref"/>
			<field xpath="j2ee:message-destination-ref-name"/>
		</unique>
		<unique name="web-app-res-ref-name-uniqueness">
			<annotation>
				<documentation>

	  The res-ref-name element specifies the name of a
	  resource manager connection factory reference.  The name
	  is a JNDI name relative to the java:comp/env context.
	  The name must be unique within a web application.

	</documentation>
			</annotation>
			<selector xpath="j2ee:resource-ref"/>
			<field xpath="j2ee:res-ref-name"/>
		</unique>
		<unique name="web-app-env-entry-name-uniqueness">
			<annotation>
				<documentation>

	  The env-entry-name element contains the name of a web
	  application's environment entry.  The name is a JNDI
	  name relative to the java:comp/env context.  The name
	  must be unique within a web application.

	</documentation>
			</annotation>
			<selector xpath="j2ee:env-entry"/>
			<field xpath="j2ee:env-entry-name"/>
		</unique>
		<key name="web-app-role-name-key">
			<annotation>
				<documentation>

	  A role-name-key is specified to allow the references
	  from the security-role-refs.

	</documentation>
			</annotation>
			<selector xpath="j2ee:security-role"/>
			<field xpath="j2ee:role-name"/>
		</key>
		<keyref name="web-app-role-name-references" refer="j2ee:web-app-role-name-key">
			<annotation>
				<documentation>

	  The keyref indicates the references from
	  security-role-ref to a specified role-name.

	</documentation>
			</annotation>
			<selector xpath="j2ee:servlet/j2ee:security-role-ref"/>
			<field xpath="j2ee:role-link"/>
		</keyref>
	</element>
	<!-- **************************************************** -->
	<complexType name="auth-constraintType">
		<annotation>
			<documentation>

	The auth-constraintType indicates the user roles that
	should be permitted access to this resource
	collection. The role-name used here must either correspond
	to the role-name of one of the security-role elements
	defined for this web application, or be the specially
	reserved role-name "*" that is a compact syntax for
	indicating all roles in the web application. If both "*"
	and rolenames appear, the container interprets this as all
	roles.  If no roles are defined, no user is allowed access
	to the portion of the web application described by the
	containing security-constraint.  The container matches
	role names case sensitively when determining access.

      </documentation>
		</annotation>
		<sequence>
			<element name="description" type="j2ee:descriptionType" minOccurs="0" maxOccurs="unbounded"/>
			<element name="role-name" type="j2ee:role-nameType" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="auth-methodType">
		<annotation>
			<documentation>

	The auth-methodType is used to configure the authentication
	mechanism for the web application. As a prerequisite to
	gaining access to any web resources which are protected by
	an authorization constraint, a user must have authenticated
	using the configured mechanism. Legal values are "BASIC",
	"DIGEST", "FORM", "CLIENT-CERT", or a vendor-specific
	authentication scheme.

	Used in: login-config

      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:string"/>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="dispatcherType">
		<annotation>
			<documentation>

	The dispatcher has four legal values: FORWARD, REQUEST, INCLUDE,
	and ERROR. A value of FORWARD means the Filter will be applied
	under RequestDispatcher.forward() calls.  A value of REQUEST
	means the Filter will be applied under ordinary client calls to
	the path or servlet. A value of INCLUDE means the Filter will be
	applied under RequestDispatcher.include() calls.  A value of
	ERROR means the Filter will be applied under the error page
	mechanism.  The absence of any dispatcher elements in a
	filter-mapping indicates a default of applying filters only under
	ordinary client calls to the path or servlet.

      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:string">
				<enumeration value="FORWARD"/>
				<enumeration value="INCLUDE"/>
				<enumeration value="REQUEST"/>
				<enumeration value="ERROR"/>
			</restriction>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<simpleType name="encodingType">
		<annotation>
			<documentation>

	The encodingType defines IANA character sets.

      </documentation>
		</annotation>
		<restriction base="xsd:string">
			<pattern value="[^\s]+"/>
		</restriction>
	</simpleType>
	<!-- **************************************************** -->
	<complexType name="error-codeType">
		<annotation>
			<documentation>

	The error-code contains an HTTP error code, ex: 404

	Used in: error-page

      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:xsdPositiveIntegerType">
				<pattern value="\d{3}"/>
				<attribute name="id" type="xsd:ID"/>
			</restriction>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="error-pageType">
		<annotation>
			<documentation>

	The error-pageType contains a mapping between an error code
	or exception type to the path of a resource in the web
	application.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<choice>
				<element name="error-code" type="j2ee:error-codeType"/>
				<element name="exception-type" type="j2ee:fully-qualified-classType">
					<annotation>
						<documentation>

	      The exception-type contains a fully qualified class
	      name of a Java exception type.

	    </documentation>
					</annotation>
				</element>
			</choice>
			<element name="location" type="j2ee:war-pathType">
				<annotation>
					<documentation>

	    The location element contains the location of the
	    resource in the web application relative to the root of
	    the web application. The value of the location must have
	    a leading `/'.

	  </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="filter-mappingType">
		<annotation>
			<documentation>

	Declaration of the filter mappings in this web
	application is done by using filter-mappingType.
	The container uses the filter-mapping
	declarations to decide which filters to apply to a request,
	and in what order. The container matches the request URI to
	a Servlet in the normal way. To determine which filters to
	apply it matches filter-mapping declarations either on
	servlet-name, or on url-pattern for each filter-mapping
	element, depending on which style is used. The order in
	which filters are invoked is the order in which
	filter-mapping declarations that match a request URI for a
	servlet appear in the list of filter-mapping elements.The
	filter-name value must be the value of the filter-name
	sub-elements of one of the filter declarations in the
	deployment descriptor.

      </documentation>
		</annotation>
		<sequence>
			<element name="filter-name" type="j2ee:filter-nameType"/>
			<choice>
				<element name="url-pattern" type="j2ee:url-patternType"/>
				<element name="servlet-name" type="j2ee:servlet-nameType"/>
			</choice>
			<element name="dispatcher" type="j2ee:dispatcherType" minOccurs="0" maxOccurs="4"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="filter-nameType">
		<annotation>
			<documentation>

	The logical name of the filter is declare
	by using filter-nameType. This name is used to map the
	filter.  Each filter name is unique within the web
	application.

	Used in: filter, filter-mapping

      </documentation>
		</annotation>
		<simpleContent>
			<extension base="j2ee:nonEmptyStringType"/>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="filterType">
		<annotation>
			<documentation>

	The filterType is used to declare a filter in the web
	application. The filter is mapped to either a servlet or a
	URL pattern in the filter-mapping element, using the
	filter-name value to reference. Filters can access the
	initialization parameters declared in the deployment
	descriptor at runtime via the FilterConfig interface.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<group ref="j2ee:descriptionGroup"/>
			<element name="filter-name" type="j2ee:filter-nameType"/>
			<element name="filter-class" type="j2ee:fully-qualified-classType">
				<annotation>
					<documentation>

	    The fully qualified classname of the filter.

	  </documentation>
				</annotation>
			</element>
			<element name="init-param" type="j2ee:param-valueType" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation>

	    The init-param element contains a name/value pair as
	    an initialization param of a servlet filter

	  </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="form-login-configType">
		<annotation>
			<documentation>

	The form-login-configType specifies the login and error
	pages that should be used in form based login. If form based
	authentication is not used, these elements are ignored.

	Used in: login-config

      </documentation>
		</annotation>
		<sequence>
			<element name="form-login-page" type="j2ee:war-pathType">
				<annotation>
					<documentation>

	    The form-login-page element defines the location in the web
	    app where the page that can be used for login can be
	    found.  The path begins with a leading / and is interpreted
	    relative to the root of the WAR.

	  </documentation>
				</annotation>
			</element>
			<element name="form-error-page" type="j2ee:war-pathType">
				<annotation>
					<documentation>

	    The form-error-page element defines the location in
	    the web app where the error page that is displayed
	    when login is not successful can be found.
	    The path begins with a leading / and is interpreted
	    relative to the root of the WAR.

	  </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="http-methodType">
		<annotation>
			<documentation>

	The http-method contains an HTTP method recognized by the
	web-app, for example GET, POST, ...

      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:string">
				<enumeration value="GET"/>
				<enumeration value="POST"/>
				<enumeration value="PUT"/>
				<enumeration value="DELETE"/>
				<enumeration value="HEAD"/>
				<enumeration value="OPTIONS"/>
				<enumeration value="TRACE"/>
			</restriction>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="locale-encoding-mapping-listType">
		<annotation>
			<documentation>

	The locale-encoding-mapping-list contains one or more
	locale-encoding-mapping(s).

      </documentation>
		</annotation>
		<sequence>
			<element name="locale-encoding-mapping" type="j2ee:locale-encoding-mappingType" maxOccurs="unbounded"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="locale-encoding-mappingType">
		<annotation>
			<documentation>

	The locale-encoding-mapping contains locale name and
	encoding name. The locale name must be either "Language-code",
	such as "ja", defined by ISO-639 or "Language-code_Country-code",
	such as "ja_JP".  "Country code" is defined by ISO-3166.

      </documentation>
		</annotation>
		<sequence>
			<element name="locale" type="j2ee:localeType"/>
			<element name="encoding" type="j2ee:encodingType"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<simpleType name="localeType">
		<annotation>
			<documentation>

	The localeType defines valid locale defined by ISO-639-1
	and ISO-3166.

      </documentation>
		</annotation>
		<restriction base="xsd:string">
			<pattern value="[a-z]{2}(_|-)?([\p{L}\-\p{Nd}]{2})?"/>
		</restriction>
	</simpleType>
	<!-- **************************************************** -->
	<complexType name="login-configType">
		<annotation>
			<documentation>

	The login-configType is used to configure the authentication
	method that should be used, the realm name that should be
	used for this application, and the attributes that are
	needed by the form login mechanism.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<element name="auth-method" type="j2ee:auth-methodType" minOccurs="0"/>
			<element name="realm-name" type="j2ee:string" minOccurs="0">
				<annotation>
					<documentation>

	    The realm name element specifies the realm name to
	    use in HTTP Basic authorization.

	  </documentation>
				</annotation>
			</element>
			<element name="form-login-config" type="j2ee:form-login-configType" minOccurs="0"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="mime-mappingType">
		<annotation>
			<documentation>

	The mime-mappingType defines a mapping between an extension
	and a mime type.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<annotation>
				<documentation>

	  The extension element contains a string describing an
	  extension. example: "txt"

	</documentation>
			</annotation>
			<element name="extension" type="j2ee:string"/>
			<element name="mime-type" type="j2ee:mime-typeType"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="mime-typeType">
		<annotation>
			<documentation>

	The mime-typeType is used to indicate a defined mime type.

	Example:
	"text/plain"

	Used in: mime-mapping

      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:string">
				<pattern value="[^\p{Cc}^\s]+/[^\p{Cc}^\s]+"/>
			</restriction>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="nonEmptyStringType">
		<annotation>
			<documentation>
	This type defines a string which contains at least one
	character.
      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:string">
				<minLength value="1"/>
			</restriction>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="security-constraintType">
		<annotation>
			<documentation>

	The security-constraintType is used to associate
	security constraints with one or more web resource
	collections

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<element name="display-name" type="j2ee:display-nameType" minOccurs="0" maxOccurs="unbounded"/>
			<element name="web-resource-collection" type="j2ee:web-resource-collectionType" maxOccurs="unbounded"/>
			<element name="auth-constraint" type="j2ee:auth-constraintType" minOccurs="0"/>
			<element name="user-data-constraint" type="j2ee:user-data-constraintType" minOccurs="0"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="servlet-mappingType">
		<annotation>
			<documentation>

	The servlet-mappingType defines a mapping between a
	servlet and a url pattern.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<element name="servlet-name" type="j2ee:servlet-nameType"/>
			<element name="url-pattern" type="j2ee:url-patternType"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="servlet-nameType">
		<annotation>
			<documentation>

	The servlet-name element contains the canonical name of the
	servlet. Each servlet name is unique within the web
	application.

      </documentation>
		</annotation>
		<simpleContent>
			<extension base="j2ee:nonEmptyStringType"/>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="servletType">
		<annotation>
			<documentation>

	The servletType is used to declare a servlet.
	It contains the declarative data of a
	servlet. If a jsp-file is specified and the load-on-startup
	element is present, then the JSP should be precompiled and
	loaded.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<group ref="j2ee:descriptionGroup"/>
			<element name="servlet-name" type="j2ee:servlet-nameType"/>
			<choice>
				<element name="servlet-class" type="j2ee:fully-qualified-classType">
					<annotation>
						<documentation>

	      The servlet-class element contains the fully
	      qualified class name of the servlet.

	    </documentation>
					</annotation>
				</element>
				<element name="jsp-file" type="j2ee:jsp-fileType"/>
			</choice>
			<element name="init-param" type="j2ee:param-valueType" minOccurs="0" maxOccurs="unbounded"/>
			<element name="load-on-startup" type="j2ee:xsdIntegerType" minOccurs="0">
				<annotation>
					<documentation>

	    The load-on-startup element indicates that this
	    servlet should be loaded (instantiated and have
	    its init() called) on the startup of the web
	    application. The optional contents of these
	    element must be an integer indicating the order in
	    which the servlet should be loaded. If the value
	    is a negative integer, or the element is not
	    present, the container is free to load the servlet
	    whenever it chooses. If the value is a positive
	    integer or 0, the container must load and
	    initialize the servlet as the application is
	    deployed. The container must guarantee that
	    servlets marked with lower integers are loaded
	    before servlets marked with higher integers. The
	    container may choose the order of loading of
	    servlets with the same load-on-start-up value.

	  </documentation>
				</annotation>
			</element>
			<element name="run-as" type="j2ee:run-asType" minOccurs="0"/>
			<element name="security-role-ref" type="j2ee:security-role-refType" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="session-configType">
		<annotation>
			<documentation>

	The session-configType defines the session parameters
	for this web application.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<element name="session-timeout" type="j2ee:xsdIntegerType" minOccurs="0">
				<annotation>
					<documentation>

	    The session-timeout element defines the default
	    session timeout interval for all sessions created
	    in this web application. The specified timeout
	    must be expressed in a whole number of minutes.
	    If the timeout is 0 or less, the container ensures
	    the default behaviour of sessions is never to time
	    out. If this element is not specified, the container
	    must set its default timeout period.

	  </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="transport-guaranteeType">
		<annotation>
			<documentation>

	The transport-guaranteeType specifies that the communication
	between client and server should be NONE, INTEGRAL, or
	CONFIDENTIAL. NONE means that the application does not
	require any transport guarantees. A value of INTEGRAL means
	that the application requires that the data sent between the
	client and server be sent in such a way that it can't be
	changed in transit. CONFIDENTIAL means that the application
	requires that the data be transmitted in a fashion that
	prevents other entities from observing the contents of the
	transmission. In most cases, the presence of the INTEGRAL or
	CONFIDENTIAL flag will indicate that the use of SSL is
	required.

	Used in: user-data-constraint

      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:string">
				<enumeration value="NONE"/>
				<enumeration value="INTEGRAL"/>
				<enumeration value="CONFIDENTIAL"/>
			</restriction>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="user-data-constraintType">
		<annotation>
			<documentation>

	The user-data-constraintType is used to indicate how
	data communicated between the client and container should be
	protected.

	Used in: security-constraint

      </documentation>
		</annotation>
		<sequence>
			<element name="description" type="j2ee:descriptionType" minOccurs="0" maxOccurs="unbounded"/>
			<element name="transport-guarantee" type="j2ee:transport-guaranteeType"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="war-pathType">
		<annotation>
			<documentation>

	The elements that use this type designate a path starting
	with a "/" and interpreted relative to the root of a WAR
	file.

      </documentation>
		</annotation>
		<simpleContent>
			<restriction base="j2ee:string">
				<pattern value="/.*"/>
			</restriction>
		</simpleContent>
	</complexType>
	<!-- **************************************************** -->
	<simpleType name="web-app-versionType">
		<annotation>
			<documentation>

	This type contains the recognized versions of
	web-application supported. It is used to designate the
	version of the web application.

      </documentation>
		</annotation>
		<restriction base="xsd:token">
			<enumeration value="2.4"/>
		</restriction>
	</simpleType>
	<!-- **************************************************** -->
	<complexType name="web-appType">
		<choice minOccurs="0" maxOccurs="unbounded">
			<group ref="j2ee:descriptionGroup"/>
			<element name="distributable" type="j2ee:emptyType"/>
			<element name="context-param" type="j2ee:param-valueType">
				<annotation>
					<documentation>

	    The context-param element contains the declaration
	    of a web application's servlet context
	    initialization parameters.

	  </documentation>
				</annotation>
			</element>
			<element name="filter" type="j2ee:filterType"/>
			<element name="filter-mapping" type="j2ee:filter-mappingType"/>
			<element name="listener" type="j2ee:listenerType"/>
			<element name="servlet" type="j2ee:servletType"/>
			<element name="servlet-mapping" type="j2ee:servlet-mappingType"/>
			<element name="session-config" type="j2ee:session-configType"/>
			<element name="mime-mapping" type="j2ee:mime-mappingType"/>
			<element name="welcome-file-list" type="j2ee:welcome-file-listType"/>
			<element name="error-page" type="j2ee:error-pageType"/>
			<element name="jsp-config" type="j2ee:jsp-configType"/>
			<element name="security-constraint" type="j2ee:security-constraintType"/>
			<element name="login-config" type="j2ee:login-configType"/>
			<element name="security-role" type="j2ee:security-roleType"/>
			<group ref="j2ee:jndiEnvironmentRefsGroup"/>
			<element name="message-destination" type="j2ee:message-destinationType"/>
			<element name="locale-encoding-mapping-list" type="j2ee:locale-encoding-mapping-listType"/>
		</choice>
		<attribute name="version" type="j2ee:web-app-versionType" use="required"/>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="web-resource-collectionType">
		<annotation>
			<documentation>

	The web-resource-collectionType is used to identify a subset
	of the resources and HTTP methods on those resources within
	a web application to which a security constraint applies. If
	no HTTP methods are specified, then the security constraint
	applies to all HTTP methods.

	Used in: security-constraint

      </documentation>
		</annotation>
		<sequence>
			<element name="web-resource-name" type="j2ee:string">
				<annotation>
					<documentation>

	    The web-resource-name contains the name of this web
	    resource collection.

	  </documentation>
				</annotation>
			</element>
			<element name="description" type="j2ee:descriptionType" minOccurs="0" maxOccurs="unbounded"/>
			<element name="url-pattern" type="j2ee:url-patternType" maxOccurs="unbounded"/>
			<element name="http-method" type="j2ee:http-methodType" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
	<!-- **************************************************** -->
	<complexType name="welcome-file-listType">
		<annotation>
			<documentation>

	The welcome-file-list contains an ordered list of welcome
	files elements.

	Used in: web-app

      </documentation>
		</annotation>
		<sequence>
			<element name="welcome-file" type="xsd:string" maxOccurs="unbounded">
				<annotation>
					<documentation>

	    The welcome-file element contains file name to use
	    as a default welcome file, such as index.html

	  </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="id" type="xsd:ID"/>
	</complexType>
</schema>
